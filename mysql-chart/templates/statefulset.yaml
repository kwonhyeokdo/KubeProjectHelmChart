apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql-chart.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "mysql-chart.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  serviceName: {{ include "mysql-chart.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mysql-chart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mysql-chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      initContainers:
        # 로컬 스토리지 권한 문제 대비
        - name: fix-perms
          image: alpine:3.20
          command: ["sh","-c","chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }} /var/lib/mysql || true"]
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      containers:
        - name: mysql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          ports:
            - name: mysql
              containerPort: {{ .Values.mysql.port }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "mysql-chart.fullname" .) .Values.existingSecret }}
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              value: {{ .Values.mysql.database | quote }}
            {{- if .Values.mysql.username }}
            - name: MYSQL_USER
              value: {{ .Values.mysql.username | quote }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "mysql-chart.fullname" .) .Values.existingSecret }}
                  key: MYSQL_PASSWORD
            {{- end }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          # 프로브는 TCP 기반 mysqladmin 사용 (비트나미 경로와 다름)
          startupProbe:
            exec:
              command:
                - sh
                - -ec
                - |
                  mysqladmin ping -h 127.0.0.1 -uroot -p"$MYSQL_ROOT_PASSWORD" | grep "mysqld is alive"
            initialDelaySeconds: {{ .Values.probes.startupInitialDelaySeconds }}
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - sh
                - -ec
                - |
                  mysqladmin ping -h 127.0.0.1 -uroot -p"$MYSQL_ROOT_PASSWORD" | grep "mysqld is alive"
            initialDelaySeconds: {{ .Values.probes.readinessInitialDelaySeconds }}
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command:
                - sh
                - -ec
                - |
                  mysqladmin status -h 127.0.0.1 -uroot -p"$MYSQL_ROOT_PASSWORD"
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName }}
        {{- end }}
